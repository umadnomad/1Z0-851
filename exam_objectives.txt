1.1 DECLARATION OF CLASSES, INTERFACES, ENUMS, and appropiate use of PACKAGE, IM
PORTS

Develop code that declares classes ( including abstract and all forms of nested 
classes ), interfaces, and enums, and includes the appropiate use of package and
 import statements ( including static imports ).

Sviluppare codice che dichiara classi ( includendo le classi astratte e tutte le
 forme di classi nidificate ), interfacce ed enumerazioni e fa uso appropiato de
gli statement package e import ( includendo gli static imports ).
--------------------------------------------------------------------------------
1.2 INTERFACES

Develop code that declares an interface. Develop code that extends an abstract c
lass.

Sviluppare codice che dichiara una interfaccia. Sviluppare codice che estende un
a classe astratta.
--------------------------------------------------------------------------------
1.3 VARIABLES

Develop code that declares, initializes, and uses primitives, arrays, enums, and
 objects as static, instance, and local variables. Also, use legal identifiers f
or variable names.

Sviluppare codice che dichiara, inizializza ed usa primitivi, array, enums e ogg
etti come variabili statiche, di istanza e locali. Utilizzare inoltre identifica
tori legali come nomi delle variabili.
--------------------------------------------------------------------------------
1.4 METHODS

Develop code that declares both static and non static methods, and - if appropia
te - use method names that adhere to the JavaBeans naming standards. Also develo
p code that declares and uses a variable-length argument list.

Sviluppare codice che dichiara metodi statici e non e, - se applicabile - dare l
oro nomi che aderiscono agli standard di nomenclatura JavaBeans. Sviluppare inol
tre codice che dichiara e usa parametri dalla lunghezza variabile.
--------------------------------------------------------------------------------
1.5 DETERMINE CORRECT OVERRIDE/OVERLOAD

Given a code example, determine if a method is correctly overriding or overloadi
ng another method, and identify legal return values (including covariant returns
), for the method.

Dato il codice in esempio, determinare se un metodo sovrascrive o sovraccarica c
orrettamente un'altro metodo e identificare, inoltre, i valori di ritorno leciti
 (includendo i ritorni covariati) di tale metodo.
--------------------------------------------------------------------------------
1.6 CONSTRUCTORS AND ISTANTIATION

Given a set of classes and superclasses, develop constructors for one or more of
 the classes. Given a class declaration, determine if a default constructor will
 be created, and if so, determine the behaviour of that constructor. Given a nes
ted or nonnested class listing, write code to istantiate the class.

Data una serie di classi e superclassi, si sviluppino i relativi costruttori. Da
ta una dichiarazione di classe, stabilire se il costruttore di default verrà cr
eato e, così fosse, determinare il comportamento di tale costruttore. Data una 
classe nidificata o non, scrivere il codice necessario alla sua istanziazione.
--------------------------------------------------------------------------------
3.1 WRAPPER CLASSES AND BOXING

Develop code that uses the primitive wrapper classes (such as Boolean, Character
, Double, Integer, etc.), and/or autoboxing & unboxing. Discuss the differences 
between the String, StringBuilder, and StringBuffer classes.

Sviluppare codice che fa uso delle classi wrapper dedicate ai primitivi (come Bo
olean, Character, Double, Integer etc.) e/o dell'autoboxing & unboxing. Si illus
tri la differenza tra cle classi String, StringBuilder e StringBuffer.
--------------------------------------------------------------------------------
5.1 ENCAPSULATION

Develop code that implements thight encapsulation, loose coupling, and high cohe
sion in classes, and describe the benefis.

Sviluppare classi indipendenti tra loro, di grande coesione interna e facenti us
o di incapsulamento stretto; Descriverne i benefici.
--------------------------------------------------------------------------------
5.2 POLYMORPHISM

Given a scenario, develop code that demonstrates the use of polymorphism. Furthe
r, determine when casting will be necessary and recognize compiler vs. runtime e
rrors related to object reference casting.

Dato uno scenario, sviluppare codice che dimostra l'uso del polimorfismo. Inoltr
e, stabilire quando sarà necessario fare un Cast e saper discernere errori di c
ompilazione rispetto a quelli di esecuzione inerenti al cast di referenze di ogg
etti
--------------------------------------------------------------------------------
5.3 ACCESS MODIFIERS ON INHERITANCE

Explain the effect of modifiers on inheritance with respect to constructors, ins
tance or static variables, and instance or static methods.

Si illustri l'effetto dei modificatori di accesso sulla ereditarietà rispetto a
i costruttori, alle variabili statiche o di istanza e ai metodi statici o di ist
anza.
--------------------------------------------------------------------------------
5.4 OVERLOADED/OVERRIDDEN METHODS DECLARATION AND INVOCATION

Given a scenario, develop code that declares and/or invokes overridden or overlo
aded methods and code that declares and/or invokes superclass, overridden, or ov
erloaded constructors.

Dato uno scenario, sviluppare: Codice che dichiara e/o invoca metodi sovrascritt
i o sovraccaricati; Codice che dichiara e/o invoca costruttori di sovrascritti, 
sovraccaricati o di superclasse.
--------------------------------------------------------------------------------
5.5 INHERITANCE

Develop code that implements "is-a" and/or "has-a" relationship

Sviluppare codice che fa uso delle relazioni "è-un" - "ha-un"
--------------------------------------------------------------------------------
7.3 PASSING VARIABLES INTO METHODS

Determine the effect upon object references and primitive values when they are p
assed into methods that perform assignments or other modifying operations on the
 parameters.

Determinare l'effetto che si ha sulle referenze ad oggetto e valori primitivi qu
ando essi vengono passato come argomenti a metodi che effettuano assegnazioni o 
altre operazioni di modifica sui parametri.
--------------------------------------------------------------------------------
7.6 ASSIGNMENT OPERATORS

Develop code that correctly applies the appropiate operators including assignmen
t operators (limited to: =, +=, -=)...

Sviluppare codice che fa uso appropiato degli operatori, includendo gli operator
i di assegnazione (limitati a: =, +=, -=)...

