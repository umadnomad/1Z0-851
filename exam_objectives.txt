1.1 DECLARATION OF CLASSES, INTERFACES, ENUMS, and appropiate use of PACKAGE, IM
PORTS

Develop code that declares classes ( including abstract and all forms of nested 
classes ), interfaces, and enums, and includes the appropiate use of package and
 import statements ( including static imports ).

Sviluppare codice che dichiara classi ( includendo le classi astratte e tutte le
 forme di classi nidificate ), interfacce, enumerazioni, e fa uso appropiato deg
li statement package ed import ( includendo gli static imports ).
--------------------------------------------------------------------------------
1.2 INTERFACES

Develop code that declares an interface. Develop code that extends an abstract c
lass.

Sviluppare codice che dichiara una interfaccia. Sviluppare codice che estende un
a classe astratta.
--------------------------------------------------------------------------------
1.3 VARIABLES

Develop code that declares, initializes, and uses primitives, arrays, enums, and
 objects as static, instance, and local variables. Also, use legal identifiers f
or variable names.

Sviluppare codice che dichiara, inizializza ed usa primitivi, array, enums e ogg
etti come variabili statiche, di istanza e locali. Utilizzare inoltre identifica
tori legali come nomi delle variabili.
--------------------------------------------------------------------------------
1.4 METHODS

Develop code that declares both static and non static methods, and - if appropia
te - use method names that adhere to the JavaBeans naming standards. Also develo
p code that declares and uses a variable-length argument list.

Sviluppare codice che dichiara metodi statici e non e, - se applicabile - dare l
oro nomi che aderiscono agli standard di nomenclatura JavaBeans. Sviluppare inol
tre codice che dichiara ed usa parametri dalla lunghezza variabile.
--------------------------------------------------------------------------------
1.5 DETERMINE CORRECT OVERRIDE/OVERLOAD

Given a code example, determine if a method is correctly overriding or overloadi
ng another method, and identify legal return values (including covariant returns
), for the method.

Dato il codice in esempio, determinare se un metodo sovrascrive o sovraccarica c
orrettamente un'altro metodo e identificare, inoltre, i valori di ritorno leciti
 (includendo i ritorni covariati) di tale metodo.
--------------------------------------------------------------------------------
1.6 CONSTRUCTORS AND ISTANTIATION

Given a set of classes and superclasses, develop constructors for one or more of
 the classes. Given a class declaration, determine if a default constructor will
 be created, and if so, determine the behaviour of that constructor. Given a nes
ted or nonnested class listing, write code to istantiate the class.

Dato un set di classi e superclassi, si sviluppino i relativi costruttori. Data 
una dichiarazione di classe, stabilire se il costruttore di default verrà creat
o e, così fosse, determinare il comportamento di tale costruttore. Data una cla
sse nidificata o non, scrivere il codice necessario alla sua istanziazione.
--------------------------------------------------------------------------------
2.1 IF AND SWITCH STATEMENTS

Develop code that implements an if or switch statement; and identify legal argum
ent types for these statements.

Sviluppare codice che implementa un if o switch statement ed identificare i tipi
 di argomenti leciti per detti statements.
--------------------------------------------------------------------------------
2.2 LOOPS AND ITERATORS

Develop code that implements all forms of loops and iterators, including the use
 of for, the enhanced for loop (for-each), do, while, labels, break, and continu
e; and explain the values taken by loop counter variables during and after loop 
execution.

Sviluppare codice che implementa tutte le forme di loop e iteratori includendo l
'uso di for, for loop avanzato (for-each), do, while, labels, break e continue; 
Spiegare i valori assunti dalle variabili di conteggio del loop durante e dopo l
a sua esecuzione.
--------------------------------------------------------------------------------
2.3 EXCEPTION CLASSES, EXCEPTION-THROWING METHODS, EXCEPTION HANDLING CLAUSES

Develop code that makes use of exceptions and exception handling clauses (try, c
atch, finally), and declares methods and overriding methods that throw exception
s.

Develop code that makes use of assertions, and distinguish appropiate from inapp
ropiate uses of assertions.

Sviluppare codice che fa uso di eccezioni, delle clausole di gestione delle ecce
zioni (try, catch, finally) e che dichiara metodi e metodi sovrascriventi che ge
nerano eccezioni.

Sviluppare codice che fa uso di asserzioni, distinguire l'uso appropiato dall'us
o inappropiato di asserzioni.
--------------------------------------------------------------------------------
2.4 EFFECT OF AN EXCEPTION ARISING

Recognize the effect of an exception arising at a specific point in a code fragm
ent. Note that the exception may be a runtime exception, a checked exception, or
 an error.

Riconoscere l'effetto di una eccezione emersa da un punto specifico in un framme
nto di codice. Nota che l'eccezione può essere una runtime (unchecked) exceptio
n, una checked exception, o un errore.
--------------------------------------------------------------------------------
2.5 COMMON EXCEPTION AND ERRORS

Recognize situations that will result in any of the following being thrown, unde
rstand which of these are thrown by the virtual machine and recognize situations
 in which others should be thrown programmatically.

Riconoscere situazioni che causeranno una delle seguenti eccezioni, discernere q
uali di queste sono generate dalla virtual machine e saper riconoscere situazion
i nelle quali le restanti dovrebbero essere generate manualmente.

ArrayIndexOutOfBoundsException, ClassCastException, IllegalArgumentException, Il
legalStateException, NullPointerException, NumberFormatException, AssertionError
, ExceptionInInitializerError, StackOverflowError, or NoClasDefFoundError.
--------------------------------------------------------------------------------
3.1 WRAPPER CLASSES AND BOXING

Develop code that uses the primitive wrapper classes (such as Boolean, Character
, Double, Integer, etc.), and/or autoboxing & unboxing. Discuss the differences 
between the String, StringBuilder, and StringBuffer classes.

Sviluppare codice che fa uso delle classi wrapper dedicate ai primitivi (come Bo
olean, Character, Double, Integer etc.) e/o dell'autoboxing & unboxing. Si illus
tri la differenza tra le classi String, StringBuilder e StringBuffer.
--------------------------------------------------------------------------------
3.2 FILE NAVIGATION AND I/O

Given a scenario involving navigating file systems, reading from files, or writi
ng to files, develop the correct solution using the following classes (sometimes
 in combination), from java.io:

Dato uno scenario che implica la navigazione di file systems, la lettura di file
s o la scrittura su files, sviluppare la corretta soluzione facendo uso delle se
guenti classi (a volte in combinazione tra loro) di java.io:

BufferedReader, BufferedWriter, File, FileReader, FileWriter, PrintWriter, and C
onsole.
--------------------------------------------------------------------------------
3.4 DATES, NUMBERS, AND CURRENCY

Use standard J2SE APIs in the java.text package to correctly format or parse dat
es, numbers and currency values for a specific locale; and, given a scenario, de
termine the appropiate methods to use if you want to use the default locale or a
 specific locale. Describe the purpose and use of the java.util.Locale class.

Utilizza le API J2SE standard del package java.text per formattare o parsificare
 correttamente date, numeri e valute monetarie per una località specifica e, da
to uno scenario, determinare i metodi appropiati qualora si volesse utilizzare l
a località di default o una localitàS specifica. Descrivere lo scopo e l'uso d
ella classe java.util.Locale.

Nota: In informatica, il parsing, analisi sintattica o parsificazione è un proc
esso che analizza un flusso di dati in ingresso (input) in modo da determinare l
a sua struttura grazie ad una data grammatica formale.
--------------------------------------------------------------------------------
3.3 SERIALIZATION

Develop code that serializes and/or de-serializes objects using the following AP
Is from java.io:

Sviluppare codice che serializza e/o deserializza oggetti utilizzando le seguent
i API di java.io:

DataInputStream, DataOutputStream, FileInputStream, FileOutputStream, ObjectInpu
tStream, ObjectOutputStream, and Serializable.
--------------------------------------------------------------------------------
3.5 PARSING, TOKENIZING, AND FORMATTING

Write code that uses standard J2SE APIs in the java.util and java.util.regex pac
kages to format or parse strings or streams. For strings, write code that uses t
he Pattern and Matcher classes and the String.split method. Recognize and use re
gular expression patterns for matching (limited to : .(dot), *(star), +(plus), ?
, \d, \s, \w, [], () ). The use of *, +, and ? will be limited to greedy quantif
iers, and the parenthesis operator will only be used as a grouping mechanism, no
t for capturing content during matching. For streams, write code using the Forma
tter and Scanner classes and the PrintWriter.format/printf methods. Recognize an
d use formatting parameters (limited to: %b, %c, %d, %f, %s) in format strings.

Scrivere codice che utilizza le API J2SE standard dei packages java.util e java.
util.regex per formattare o parsificare stringhe o streams. Per le stringhe, scr
ivere codice che utilizza le classi Pattern, Matcher e il metodo String.split. R
iconoscere ed utilizzare le espressioni regolari ai fini di ricerca per corrispo
ndenza (limitate a: .(punto), *(asterisco), +(più), ?, \d, \s, \w, [], () ). L'
uso di *, + e ? sarà limitato ai greedy quantifiers e, le parentesi, verranno u
tilizzate solamente come meccanismo di raggruppamento e non per catturare conten
uto durante la ricerca per corrispondenza. Per gli streams, scrivere codice che 
utilizza le classi Formatter, Scanner, e i metodi PrintWriter.format/printf. Ric
onoscere e utilizzare i parametri di formattazione (limitati a: %b, %c, %d, %f, 
%s).
--------------------------------------------------------------------------------
5.1 ENCAPSULATION

Develop code that implements thight encapsulation, loose coupling, and high cohe
sion in classes, and describe the benefis.

Sviluppare classi indipendenti tra loro, di grande coesione interna e facenti us
o di incapsulamento stretto; Descriverne i benefici.
--------------------------------------------------------------------------------
5.2 POLYMORPHISM

Given a scenario, develop code that demonstrates the use of polymorphism. Furthe
r, determine when casting will be necessary and recognize compiler vs. runtime e
rrors related to object reference casting.

Dato uno scenario, sviluppare codice che mostra l'uso del polimorfismo. Inoltre,
 determinare quando il Casting è necessario e saper distinguere gli errori di c
ompilazione rispetto a quelli di esecuzione per ciò che è inerente al cast di 
referenze di oggetti
--------------------------------------------------------------------------------
5.3 ACCESS MODIFIERS ON INHERITANCE

Explain the effect of modifiers on inheritance with respect to constructors, ins
tance or static variables, and instance or static methods.

Si illustri l'effetto dei modificatori di accesso sulla ereditarietà rispetto a
i costruttori, alle variabili statiche o di istanza e ai metodi statici o di ist
anza.
--------------------------------------------------------------------------------
5.4 OVERLOADED/OVERRIDDEN METHODS DECLARATION AND INVOCATION

Given a scenario, develop code that declares and/or invokes overridden or overlo
aded methods and code that declares and/or invokes superclass, overridden, or ov
erloaded constructors.

Dato uno scenario, sviluppare: Codice che dichiara e/o invoca metodi sovrascritt
i o sovraccaricati; Codice che dichiara e/o invoca costruttori sovrascritti, sov
raccaricati o di superclasse.
--------------------------------------------------------------------------------
5.5 INHERITANCE

Develop code that implements "is-a" and/or "has-a" relationship

Sviluppare codice che fa uso delle relazioni "è-un" - "ha-un"
--------------------------------------------------------------------------------
6.2 OVERRIDING HASHCODE() AND EQUALS()

Distinguish between correct and incorrect overrides of corresponding hashCode an
d equals methods, and explain the difference between == and the equals method.

Discernere corrette ed incorrette sovrascritture dei metodi hashCode ed equals, 
spiegare la differenza tra l'operatore relazionale == e il metodo equals.
--------------------------------------------------------------------------------
7.3 PASSING VARIABLES INTO METHODS

Determine the effect upon object references and primitive values when they are p
assed into methods that perform assignments or other modifying operations on the
 parameters.

Determinare l'effetto che si ha sulle referenze ad oggetto e valori primitivi qu
ando essi vengono passati come argomenti a metodi che effettuano assegnazioni o 
altre operazioni di modifica sui parametri.
--------------------------------------------------------------------------------
7.4 GARBAGE COLLECTION

Given a code example, recognize the point at which and object becomes eligible f
or garbage collection, and determine what is and is not guaranteed by the garbag
e collection system, and recognize the behaviors of the Object finalize() method
.

Dato il codice in esempio, si identifichi il punto nel quale un oggetto diventa 
idoneo per la garbage collection, si illustri inoltre: Cosa è/non è garantito 
dal sistema di garbage collection; Il comportamento del metodo finalize() della 
classe Object.
--------------------------------------------------------------------------------
7.6 ASSIGNMENT OPERATORS

Develop code that correctly applies the appropiate operators including assignmen
t operators (limited to: =, +=, -=), arithmetic operators (limited to: +, -, *, 
/, %, ++, --), relational operators (limited to: <, <=, >, >=, ==, !=), the inst
anceof operator, logical operators (limited to: &, |, ^, !, &&, ||), and the con
ditional operator (? :), to produce a desidered result. Write code that determin
es the equality of two objects or two primitives.

Sviluppare codice che fa uso appropiato degli operatori, includendo operatori di
 assegnazione (limitati a: =, +=, -=), operatori aritmetici (limitati a: +, -, *
, /, %, ++, --), operatori relazionali (limitati a: <, <=, >, >=, ==, !=), opera
tori logici (limitati a: &, |, ^, !, &&, ||) e gli operatori condizionale (? :) 
ed instanceof per produrre il risultato desiderato. Scrivere codice che determin
a l'eguaglianza di due oggetti o due primitivi.